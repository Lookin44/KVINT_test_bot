from dotenv import load_dotenv
from telegram import (InlineKeyboardButton,
                      InlineKeyboardMarkup,
                      Update)
from telegram.ext import (Updater,
                          CommandHandler,
                          CallbackQueryHandler,
                          CallbackContext)

import machine_core
import os
import logging

load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

logging.basicConfig(
    format='%(asctime)s - '
           '%(name)s - '
           '%(levelname)s - '
           '%(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

bot = machine_core.PizzaBoy()


def start(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤—Ç–µ /start –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞."""
    user = update.effective_user
    update.message.reply_markdown_v2(
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.mention_markdown_v2()}\! '
        f'–ì–æ—Ç–æ–≤—ã –∑–∞–∫–∞–∑–∞—Ç—å –≤–∫—É—Å–Ω–µ–π—à—É—é –ø–∏—Ü—Ü—É? üòâ'
    )


def order(update: Update, context: CallbackContext) -> None:
    """–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥–∏—Ç–µ /order"""
    bot.start()
    keyboard = [
        [
            InlineKeyboardButton("ü•ò–ë–æ–ª—å—à—É—é", callback_data='–±–æ–ª—å—à—É—é'),
            InlineKeyboardButton("üçï–ú–∞–ª–µ–Ω—å–∫—É—é", callback_data='–º–∞–ª–µ–Ω—å–∫—É—é'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        '–ö–∞–∫—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–∏—Ü—Ü—É? –ë–æ–ª—å—à—É—é –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫—É—é?',
        reply_markup=reply_markup
    )


def message_handler(update: Update, context: CallbackContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â—è—è –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    –∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ —Å—Ç–µ–π—Ç-–º–∞—à–∏–Ω—ã"""
    query = update.callback_query

    query.answer()

    if bot.state == 'pizza_size':
        if query.data in ('–±–æ–ª—å—à—É—é', '–º–∞–ª–µ–Ω—å–∫—É—é'):
            bot.set_pizza_size(query.data)
            bot.next()
            keyboard = [
                [
                    InlineKeyboardButton(
                        "üíµ–ù–∞–ª–∏—á–∫–æ–π", callback_data='–Ω–∞–ª–∏—á–∫–æ–π'
                    ),
                    InlineKeyboardButton(
                        "üí≥–û–Ω–ª–∞–π–Ω", callback_data='–æ–Ω–ª–∞–π–Ω'
                    ),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(
                text='–ö–∞–∫ –í—ã –±—É–¥–µ—Ç–µ –ø–ª–∞—Ç–∏—Ç—å?', reply_markup=reply_markup
            )
        else:
            update.message.reply_text('–î–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –±–æ–ª—å—à—É—é / –º–∞–ª–µ–Ω—å–∫—É—é.')
    elif bot.state == 'pay_method':
        if query.data in ('–Ω–∞–ª–∏—á–∫–æ–π', '–æ–Ω–ª–∞–π–Ω'):
            bot.set_pay_method(query.data)
            bot.next()
            keyboard = [
                [
                    InlineKeyboardButton(
                        "‚úÖ–î–∞", callback_data='–¥–∞'
                    ),
                    InlineKeyboardButton(
                        "‚ùå–ù–µ—Ç", callback_data='–Ω–µ—Ç'
                    ),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(
                f'–í—ã –±—É–¥–µ—Ç–µ {bot.pizza_size} –ø–∏—Ü—Ü—É, '
                f'–æ–ø–ª–∞—Ç–∞ - {bot.pay_method}?',
                reply_markup=reply_markup
            )
        else:
            update.message.reply_text(
                '–ö–æ–Ω–µ—á–Ω–æ –µ—Å—Ç—å –º–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã, '
                '–∏ –ø–µ—Ä–≤—ã–º–∏ –±–∏—Ç–∫–æ–π–Ω–∞–º–∏ –ø–æ–∫—É–ø–∞–ª–∏ –ø–∏—Ü—Ü—É, '
                '–Ω–æ —Å–µ–π—á–∞—Å –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∫–æ–π –∏–ª–∏ –æ–Ω–ª–∞–π–Ω)'
            )
    elif bot.state == 'confirm':
        if query.data == '–¥–∞':
            bot.done()
            bot.end()
            query.edit_message_text(
                '–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑! –ñ–¥–µ–º –í–∞—Å —Å–Ω–æ–≤–∞ —É –Ω–∞—Å üëã'
            )
        elif query.data == '–Ω–µ—Ç':
            bot.cancel()
            bot.end()
            query.edit_message_text(
                '–û—É!( –í–∞–º —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. '
                '–î–∞–≤–∞–π—Ç–µ —Å–Ω–æ–≤–∞ —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–∫–∞–∑ /order?'
            )
        else:
            update.message.reply_text('–î–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –¥–∞ / –Ω–µ—Ç.')
    else:
        update.message.reply_text(
            '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –î–∞–≤–∞–π—Ç–µ —Å–Ω–æ–≤–∞ —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–∫–∞–∑ /order?'
        )


def cancel(update: Update, context: CallbackContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—è—é—â—è—è –≤–µ—Å—å –∑–∞–∫–∞–∑ /cancel"""
    if bot.state != 'waiting':
        bot.cancel()
        bot.end()
        bot.set_pizza_size(None)
        bot.set_pay_method(None)
        update.message.reply_text('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω')
    else:
        update.message.reply_text(
            '–ß—Ç–æ –±—ã —á—Ç–æ-—Ç–æ –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–¥–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–∞–∑–∞—Ç—å) '
            '–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –∑–∞–∫–∞–∑ /order?'
        )


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    updater = Updater(TELEGRAM_TOKEN, use_context=True)

    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CommandHandler('order', order))
    dispatcher.add_handler(CommandHandler('cancel', cancel))
    dispatcher.add_handler(CallbackQueryHandler(message_handler))

    updater.start_polling()

    updater.idle()
